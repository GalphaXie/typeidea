[unix_http_server]
file={{ deploy_path }}/tmp/supervisor.sock   ; the path to the socket file

[inet_http_server]         ; Web Server的部分
port=172.17.0.4:9001        ;
username=user              ; 登录用户名
password=123               ; 登录密码

[supervisord]               ; 全局配置部分
logfile={{ deploy_path }}supervisord.log ; 主log文件
logfile_maxbytes=50MB        ; rotation配置
logfile_backups=10           ; 备份数量
loglevel=info                ; 日志级别，默认 info; 其他选项: debug,warn,trace
pidfile={{ deploy_path }}/tmp/supervisord.pid ; pid文件
nodaemon=false               ; 默认是后台运行，如果需要前台运行可以设置为true

[rpcinterface:supervisor]    ; 必须启用，supervisorctl通过它来管理进程
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]             ; 前几项配置必须跟[unix_http_server]保持相同
serverurl=unix://{{ deploy_path }}/tmp/supervisor.sock

[program:typeidea]           ;程序配置的部分，一份supervisord.conf可以配置多个程序
command=gunicorn typeidea.wsgi:application -w 1 -b 172.17.0.4:{{ port_prefix }}%(process_num)1d  ; 启动命令，需要注意路径，最后的%(process_num)1d是获取当前进程号
process_name=%(program_name)s_%(process_num)s ; 进程名，当下面的numprocs大于1时，必须配置%(process_num)s
numprocs={{ process_count }}                    ; 要启动进程数
directory={{ deploy_path }}             ; 同上面配置，启动时所处的目录
priority=999                  ; 程序权重，多个程序时不同权重的程序启动先后顺序不同
autostart=true                ; supervisord启动是是否自动启动
environment=TYPEIDEA_PROFILE="{{ profile }}"  ; 环境变量配置
startsecs=5                   ; 进程启动多长时间后视为正常运行
autorestart=unexpected        ; 何时重启进程如果程序在正常运行后退出，默认是unexpected也就是异常（不属于下面配置的exitcode时）
exitcodes=0,2                 ; 正常退出的exitcode
stopsignal=QUIT               ; kill进程的信号，默认是TERM，这是Linux中断信号：有如下选项
redirect_stderr=true          ; 重定向错误到stdout中，默认关闭
stdout_logfile=stdout.log        ;同 [supervisord]
stdout_logfile_maxbytes=1MB   ;
stdout_logfile_backups=10